import 'dart:convert';

import 'package:dart_appwrite/models.dart';
import 'package:equatable/equatable.dart';
import 'package:maintenance_config/models/basic_types.dart';

class VulnerabilityModel extends Equatable {
  final String id;
  final List<PortModel> ports;
  final SeverityTypes severity;
  final List<CVEModel> cveList;
  final String description;
  final String problem;
  final String details;
  final String potentialResolution;
  final String? analystResolution;

  const VulnerabilityModel({
    required this.id,
    required this.ports,
    required this.severity,
    required this.cveList,
    required this.description,
    required this.problem,
    required this.details,
    required this.potentialResolution,
    this.analystResolution,
  });

  static const VulnerabilityModel empty = VulnerabilityModel(
    id: '',
    ports: [],
    severity: SeverityTypes.low,
    cveList: [],
    description: '',
    problem: '',
    details: '',
    potentialResolution: '',
    analystResolution: '',
  );

  bool get isEmpty => this == VulnerabilityModel.empty;
  bool get isNotEmpty => this != VulnerabilityModel.empty;

  @override
  List<Object?> get props {
    return [
      id,
      ports,
      severity,
      cveList,
      description,
      problem,
      details,
      potentialResolution,
      analystResolution,
    ];
  }

  VulnerabilityModel copyWith({
    String? id,
    List<PortModel>? ports,
    SeverityTypes? severity,
    List<CVEModel>? cveList,
    String? description,
    String? problem,
    String? details,
    String? potentialResolution,
    ValueGetter<String?>? analystResolution,
  }) {
    return VulnerabilityModel(
      id: id ?? this.id,
      ports: ports ?? this.ports,
      severity: severity ?? this.severity,
      cveList: cveList ?? this.cveList,
      description: description ?? this.description,
      problem: problem ?? this.problem,
      details: details ?? this.details,
      potentialResolution: potentialResolution ?? this.potentialResolution,
      analystResolution: analystResolution != null ? analystResolution() : this.analystResolution,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      '\$id': id,
      'ports': ports.map((x) => x.toMap()).toList(),
      'severity': severity.name,
      'cveList': cveList.map((x) => x.toMap()).toList(),
      'description': description,
      'problem': problem,
      'details': details,
      'potentialResolution': potentialResolution,
      'analystResolution': analystResolution,
    };
  }

  Map<String, dynamic> toDoc() {
    return {
      '\$id': id,
      'ports': ports.map((x) => x.toMap()).toList(),
      'severity': severity.name,
      'cveList': cveList.map((x) => x.toMap()).toList(),
      'description': description,
      'problem': problem,
      'details': details,
      'potentialResolution': potentialResolution,
      'analystResolution': analystResolution,
    };
  }

  Map<String, dynamic> toNewDoc() {
    return {
      'ports': ports.map((x) => x.toMap()).toList(),
      'severity': severity.name,
      'cveList': cveList.map((x) => x.toMap()).toList(),
      'description': description,
      'problem': problem,
      'details': details,
      'potentialResolution': potentialResolution,
      'analystResolution': analystResolution,
    };
  }

  factory VulnerabilityModel.fromMap(Map<String, dynamic> map) {
    return VulnerabilityModel(
      id: map['\$id'] ?? '',
      ports: List<PortModel>.from(map['ports']?.map((x) => PortModel.fromMap(x))),
      severity: SeverityTypes.values.firstWhere((e) => e.toString() == 'SeverityTypes.${map['severity']}'),
      cveList: List<CVEModel>.from(map['cveList']?.map((x) => CVEModel.fromMap(x))),
      description: map['description'] ?? '',
      problem: map['problem'] ?? '',
      details: map['details'] ?? '',
      potentialResolution: map['potentialResolution'] ?? '',
      analystResolution: map['analystResolution'],
    );
  }

  factory VulnerabilityModel.fromDoc(Document doc) {
    return VulnerabilityModel(
      id: doc.$id,
      ports: List<PortModel>.from(doc.data['ports']?.map((x) => PortModel.fromMap(x))),
      severity: SeverityTypes.values.firstWhere((e) => e.toString() == 'SeverityTypes.${doc.data['severity']}'),
      cveList: List<CVEModel>.from(doc.data['cveList']?.map((x) => CVEModel.fromMap(x))),
      description: doc.data['description'] ?? '',
      problem: doc.data['problem'] ?? '',
      details: doc.data['details'] ?? '',
      potentialResolution: doc.data['potentialResolution'] ?? '',
      analystResolution: doc.data['analystResolution'],
    );
  }

  String toJson() => json.encode(toMap());

  factory VulnerabilityModel.fromJson(String source) => VulnerabilityModel.fromMap(json.decode(source));

  @override
  String toString() {
    return 'VulnerabilityModel(id: $id, ports: $ports, severity: $severity, cveList: $cveList, description: $description, problem: $problem, details: $details, potentialResolution: $potentialResolution, analystResolution: $analystResolution)';
  }
}

enum PortProtocol { tcp, udp, unknown }

enum SeverityTypes { critical, high, medium, low }

class PortModel extends Equatable {
  final String id;
  final int portNumber;
  final PortProtocol protocol;

  const PortModel({
    required this.id,
    required this.portNumber,
    required this.protocol,
  });

  static const PortModel empty = PortModel(id: '', portNumber: 0, protocol: PortProtocol.unknown);

  bool get isEmpty => this == PortModel.empty;
  bool get isNotEmpty => this != PortModel.empty;

  @override
  List<Object> get props => [id, portNumber, protocol];

  PortModel copyWith({
    String? id,
    int? portNumber,
    PortProtocol? protocol,
  }) {
    return PortModel(
      id: id ?? this.id,
      portNumber: portNumber ?? this.portNumber,
      protocol: protocol ?? this.protocol,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      '\$id': id,
      'portNumber': portNumber,
      'protocol': protocol.name,
    };
  }

  Map<String, dynamic> toDoc() {
    return {
      '\$id': id,
      'portNumber': portNumber,
      'protocol': protocol.name,
    };
  }

  Map<String, dynamic> toNewDoc() {
    return {
      'portNumber': portNumber,
      'protocol': protocol.name,
    };
  }

  factory PortModel.fromMap(Map<String, dynamic> map) {
    return PortModel(
      id: map['\$id'] ?? '',
      portNumber: map['portNumber']?.toInt() ?? 0,
      protocol: PortProtocol.values.firstWhere((e) => e.toString() == 'PortProtocol.${map['protocol']}'),
    );
  }

  factory PortModel.fromDoc(Document doc) {
    return PortModel(
      id: doc.$id,
      portNumber: doc.data['portNumber']?.toInt() ?? 0,
      protocol: PortProtocol.values.firstWhere((e) => e.toString() == 'PortProtocol.${doc.data['protocol']}'),
    );
  }

  String toJson() => json.encode(toMap());

  factory PortModel.fromJson(String source) => PortModel.fromMap(json.decode(source));

  @override
  String toString() => 'PortModel(id: $id, portNumber: $portNumber, protocol: $protocol)';
}

class CVEModel extends Equatable {
  final String id;
  final String cveNumber;
  final String? url;

  const CVEModel({
    required this.id,
    required this.cveNumber,
    this.url,
  });

  static const CVEModel empty = CVEModel(id: '', cveNumber: '', url: '');

  bool get isEmpty => this == CVEModel.empty;
  bool get isNotEmpty => this != CVEModel.empty;

  @override
  List<Object?> get props => [id, cveNumber, url];

  CVEModel copyWith({
    String? id,
    String? cveNumber,
    ValueGetter<String?>? url,
  }) {
    return CVEModel(
      id: id ?? this.id,
      cveNumber: cveNumber ?? this.cveNumber,
      url: url != null ? url() : this.url,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      '\$id': id,
      'cveNumber': cveNumber,
      'url': url,
    };
  }

  Map<String, dynamic> toDoc() {
    return {
      '\$id': id,
      'cveNumber': cveNumber,
      'url': url,
    };
  }

  Map<String, dynamic> toNewDoc() {
    return {
      'cveNumber': cveNumber,
      'url': url,
    };
  }

  factory CVEModel.fromMap(Map<String, dynamic> map) {
    return CVEModel(
      id: map['\$id'] ?? '',
      cveNumber: map['cveNumber'] ?? '',
      url: map['url'],
    );
  }

  factory CVEModel.fromDoc(Document doc) {
    return CVEModel(
      id: doc.$id,
      cveNumber: doc.data['cveNumber'] ?? '',
      url: doc.data['url'],
    );
  }

  String toJson() => json.encode(toMap());

  factory CVEModel.fromJson(String source) => CVEModel.fromMap(json.decode(source));

  @override
  String toString() => 'CVEModel(id: $id, cveNumber: $cveNumber, url: $url)';
}
